{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      authorization\n    } = _ref;\n    this.getProfile = () => {\n      return fetch(this._baseUrl + '/users/me', {\n        headers: {\n          authorization: this._authorization\n        }\n      }).then(res => this._chekStatus(res));\n    };\n    this.getCards = () => {\n      return fetch(this._baseUrl + '/cards', {\n        headers: {\n          authorization: this._authorization\n        }\n      }).then(res => this._chekStatus(res));\n    };\n    this.changeProfile = data => {\n      return fetch(this._baseUrl + '/users/me', {\n        method: 'PATCH',\n        headers: {\n          authorization: this._authorization,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: data.name,\n          about: data.about\n        })\n      }).then(res => this._chekStatus(res));\n    };\n    this.addNewPost = data => {\n      return fetch(this._baseUrl + '/cards', {\n        method: 'POST',\n        headers: {\n          authorization: this._authorization,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          link: data.link,\n          name: data.place\n        })\n      }).then(res => this._chekStatus(res));\n    };\n    this.deletCard = id => {\n      return fetch(this._baseUrl + '/cards/' + id, {\n        method: 'DELETE',\n        headers: {\n          authorization: this._authorization\n        }\n      }).then(res => this._chekStatus(res));\n    };\n    this.changeAvatar = data => {\n      return fetch(this._baseUrl + '/users/me/avatar', {\n        method: 'PATCH',\n        headers: {\n          authorization: this._authorization,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          avatar: data.avatar\n        })\n      }).then(res => this._chekStatus(res));\n    };\n    this.putLike = id => {\n      return fetch(this._baseUrl + '/cards/' + id + '/likes', {\n        method: 'PUT',\n        headers: {\n          authorization: this._authorization\n        }\n      }).then(res => this._chekStatus(res));\n    };\n    this.deletLike = id => {\n      return fetch(this._baseUrl + '/cards/' + id + '/likes', {\n        method: 'DELETE',\n        headers: {\n          authorization: this._authorization\n        }\n      }).then(res => this._chekStatus(res));\n    };\n    this._baseUrl = baseUrl;\n    this._authorization = authorization;\n  }\n  _chekStatus(res) {\n    return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-59',\n  authorization: '08c90c1a-1998-40ee-b8a2-c5f50d26b954'\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","_ref","baseUrl","authorization","getProfile","fetch","_baseUrl","headers","_authorization","then","res","_chekStatus","getCards","changeProfile","data","method","body","JSON","stringify","name","about","addNewPost","link","place","deletCard","id","changeAvatar","avatar","putLike","deletLike","ok","json","Promise","reject","status","api"],"sources":["/Users/denishazheev/Documents/project/mesto-react/src/utils/Api.js"],"sourcesContent":["class Api {\n\n    constructor({baseUrl, authorization}){\n        this._baseUrl = baseUrl;\n        this._authorization = authorization;\n    }\n\n    getProfile = () => {\n        return fetch(this._baseUrl + '/users/me', {\n            headers: {\n                authorization:  this._authorization\n            }\n        })\n        .then(res => this._chekStatus(res))\n    };\n    \n    getCards = () => {\n       return  fetch(this._baseUrl + '/cards', {\n            headers: {\n                authorization:  this._authorization\n            }\n        })\n        .then(res => this._chekStatus(res))\n    };\n    \n    changeProfile = (data) => {\n        return  fetch(this._baseUrl + '/users/me', {\n            method: 'PATCH',\n             headers: {\n                 authorization: this._authorization,\n                 'Content-Type': 'application/json'\n             },\n            body: JSON.stringify({\n                name: data.name,\n                about: data.about\n              }) \n         })\n            .then(res => this._chekStatus(res))\n        };\n    \n    addNewPost = (data) => {\n        return  fetch(this._baseUrl + '/cards', {\n            method: 'POST',\n             headers: {\n                 authorization:  this._authorization,\n                 'Content-Type': 'application/json'\n             },\n            body: JSON.stringify({\n                link: data.link,\n                name: data.place,\n              }) \n         })\n            .then(res => this._chekStatus(res))\n        };\n    \n    deletCard = (id) => {\n        return  fetch(this._baseUrl + '/cards/' + id, {\n            method: 'DELETE',\n             headers: {\n                 authorization:  this._authorization,\n             }\n        })\n        .then(res => this._chekStatus(res))\n    };\n\n    changeAvatar = (data) => {\n    return  fetch(this._baseUrl + '/users/me/avatar', {\n        method: 'PATCH',\n        headers: {\n            authorization: this._authorization,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            avatar: data.avatar\n        }) \n    })\n        .then(res => this._chekStatus(res))\n}\n\n    putLike = (id) => {\n        return  fetch(this._baseUrl + '/cards/' + id + '/likes', {\n            method: 'PUT',\n            headers: {\n                authorization: this._authorization,\n            }\n        })\n        .then(res => this._chekStatus(res))\n    }\n\n    deletLike = (id) => {\n        return  fetch(this._baseUrl + '/cards/' + id + '/likes', {\n            method: 'DELETE',\n            headers: {\n                authorization: this._authorization,\n            }\n        })\n            .then(res => this._chekStatus(res))\n        }\n    \n    _chekStatus(res){\n        return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`)\n    }\n}\nconst api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-59',\n    authorization: '08c90c1a-1998-40ee-b8a2-c5f50d26b954'\n});\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}